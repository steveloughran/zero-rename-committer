@startuml

'define icons
control "Job Manager"
participant "Job Committer"
control Executor
participant "Task Committer"
participant Operation
control "YARN NodeManager"
control "YARN ResourceManager"

' protocol
'== Initialization ==

"Job Manager" -> "Job Committer": setupJob()

== For Each Task Attempt ==
"Job Manager" -> Executor: execute work
Executor -> "Task Committer": setupTask()
Executor -> "Task Committer": getWorkPath()
Executor <-- "Task Committer": taskAttemptDirectory
Executor --> Operation: map/reduce + taskAttemptDirectory

loop Until execution is complete...
  Executor -> "Job Manager" : ping?
  "Job Manager" -> Executor : task is known
  alt task is unknown/timeout/limits-exceeded
    Executor -> Executor: exit!
    Executor -> "YARN NodeManager": (exited)
    "YARN NodeManager" -> "YARN ResourceManager": process exited
  end
    "Job Manager" -> "YARN ResourceManager": heartbeat request
    "Job Manager" <-- "YARN ResourceManager": heartbeat response [exited tasks]*
end
Executor <-- Operation: map/reduce finished

'TODO: MR failure

Executor -> "Task Committer": needsTaskCommit()?
Executor <-- "Task Committer": <true | false>


alt needs task commit
  Executor -> "Job Manager": can commit?
  Executor <-- "Job Manager":  <commit | abort>
  alt action = commit
    Executor -> "Job Manager": commitPending
    Executor -> "Task Committer": commitTask()
    Executor <-- "Task Committer": committed task
  else action = abort
    Executor -> "Task Committer": abortTask()
    Executor <-- "Task Committer": aborted task
  end
end
Executor -> "Job Manager" : done
Executor -> Executor: exit!
Executor -> "YARN NodeManager": (exited)
"YARN NodeManager" -> "YARN ResourceManager": process exited

alt done-not-received-in time interval
  "Job Manager" -> "Job Committer": cleanupTask()
  "Job Manager" -> "Job Manager": reschedule task
end


== Job Commit==

"Job Manager" -> "YARN ResourceManager": heartbeat request
"Job Manager" <-- "YARN ResourceManager": heartbeat response [exited tasks]*

"Job Manager" -> "Job Committer": commitJob()
"Job Manager" <-- "Job Committer": committed job
"Job Manager" -> "Job Committer": cleanupJob()
"Job Manager" -> "YARN ResourceManager": finished
"Job Manager" -> "Job Manager": exit!
"Job Manager" -> "YARN NodeManager": (exited)
"YARN NodeManager" -> "YARN ResourceManager": process exited


@enduml
