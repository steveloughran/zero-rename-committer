@startuml

'define icons
control Driver
participant "Job Committer"
control Executor
participant "Task Committer"
participant Operation

' protocol
'== Initialization ==

Driver -> "Job Committer": setupJob()

== For Each Task Attempt ==
Driver -> Executor: execute work
Executor -> "Task Committer": setupTask()
Executor --> Operation: execute
Executor <-- Operation: newTaskTempFile
Executor -> "Task Committer": newTaskTempFile
Executor <-- "Task Committer": tempFile
Executor --> Operation: tempFile

Executor <-- Operation: newTaskTempFileAbsPath
Executor -> "Task Committer": newTaskTempFileAbsPath
Executor <-- "Task Committer": tempFileAbsPath
Executor --> Operation: tempFileAbsPath

Executor <-- Operation: finished

Executor -> Driver: can commit?
Executor <-- Driver:  <commit | abort>

alt commit
  Executor -> "Task Committer": needsTaskCommit()?
  Executor <-- "Task Committer": <true | false>
    alt needs task commit
    Executor -> Driver: commitPending
    Executor -> "Task Committer": commitTask()
    Executor <-- "Task Committer": committed task+ TaskCommitMessage
    Executor -> Driver : done + TaskCommitMessage
    end

else abort
  Executor -> "Task Committer": abortTask()
  Executor <-- "Task Committer": aborted task
  Executor -> Driver : done
end


== Job Commit==


Driver -> "Job Committer": commitJob(Set[TaskCommitMessage])
Driver <-- "Job Committer": committed job
Driver -> "Job Committer": cleanupJob()


@enduml
